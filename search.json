[
  {
    "objectID": "posts/9_randomforest/index.html",
    "href": "posts/9_randomforest/index.html",
    "title": "Basic Random Forest",
    "section": "",
    "text": "In this post, let’s run a quick random forest to find most important features that can predict WGD status. We first load the data frame from last post:\n\n# Load all packages\nrequire(tidyverse)\nrequire(here)\nrequire(randomForest)\n\n# Load the mutation table from the RDS file saved in the last post\ndata &lt;- readRDS(here(\"_data/combined_data.rds\"))\n\nRather than training the random forest on all genes, we’ll focus on a curated subset to improve relevance and efficiency. We’ll use the MSK-IMPACT genes annoatated in OncoKB, a widely recognized resource that provides a high-confidence list of cancer-associated genes. This targeted approach streamlines computation and enhances interpretability by concentrating on genes most likely to impact our analysis.\n\nfile_path &lt;- here(\"_data/cancerGeneList.tsv\")\n\nGene_anno &lt;- read_tsv(file_path, guess_max = Inf)\n\n# pull genes in MSK-IMPACT panel \n\nMSK_genes &lt;- Gene_anno %&gt;% filter(`MSK-IMPACT` == \"Yes\") %&gt;%\n            pull(`Hugo Symbol`) %&gt;% unique()\n\nNow select genes in this list and make the data frame for random forest analysis\n\ndata_rf &lt;- data %&gt;% \n        dplyr::select(any_of(paste0(\"mut.\", MSK_genes)),\n                                    WGD) %&gt;%\n                filter(! is.na(WGD))\n\n# remove \"-\" from names to avoid errors running RF               \nnames(data_rf) &lt;- gsub(\"-\", \"\", names(data_rf))\n\nset.seed(23)\nrf &lt;- randomForest(as.factor(WGD) ~ ., \n            data_rf )\n\nvarImpPlot(rf, n.var = 20)\n\n\n\n\n\n\n\nprint(rf)\n\n\nCall:\n randomForest(formula = as.factor(WGD) ~ ., data = data_rf) \n               Type of random forest: classification\n                     Number of trees: 500\nNo. of variables tried at each split: 21\n\n        OOB estimate of  error rate: 29.93%\nConfusion matrix:\n    0   1 class.error\n0 302 243   0.4458716\n1 238 824   0.2241055\n\n\nIt’s not surprising that TP53 mutation shows a strong association with WGD status in the results.\nIn the next post, we’ll use the caret package to perform more standardized machine learning workflows."
  },
  {
    "objectID": "posts/7_Tidyverse_data_transform/index.html",
    "href": "posts/7_Tidyverse_data_transform/index.html",
    "title": "Tidyverse: Transform data, mutation table to matrix",
    "section": "",
    "text": "Data manipulation is a very important skill which helps to organize your data into a desired format, making it easier to analyze and visualize. The Tidyverse is a collection of R packages designed for data science, providing powerful tools for transforming and cleaning data efficiently. In this post, we will explore how to use Tidyverse functions to transform data for your analysis workflow.\nIn this post, we will continue to work on the mutation table we imported in our last post and convert it to a matrix. This process involves reshaping the data from a long format to a wide format, which is often required for downstream analyses such as clustering or heatmap visualization. We will use Tidyverse functions like pivot_wider() from the tidyr package to accomplish this transformation.\nThe pivot_wider() function is used to transform data from a long format (where each row is an observation) to a wide format (where each unique value in a column becomes its own column). This is particularly useful when you want to create a matrix-like structure for further analysis.\nThe pivot_longer() function does the opposite: it converts data from a wide format back to a long format, making it easier to tidy and manipulate data for plotting or modeling.\nBoth functions are part of the tidyr package in the Tidyverse and are essential tools for reshaping data in R.\n\n# Load all packages\nrequire(tidyverse)\nrequire(here)\n\nurl &lt;- \"https://plus.figshare.com/ndownloader/files/51065732\"\nfile_path &lt;- here(\"_data/OmicsSomaticMutations.csv\")\n\n# added this since we already downloaded it\nif (!file.exists(file_path)) {\n    download.file(url, file_path)\n}\n\ndepmap_mutation_data &lt;- read_csv(file_path, guess_max = Inf)\n\nFirst, let’s simplify the table using dplyr::select. This step isn’t really necessary if you’re already familiar with the data structure, but it makes it easier to see what’s happening in the data.\n\ndepmap_mutation_data &lt;- depmap_mutation_data %&gt;% \n                dplyr::select(ModelID, LikelyLoF, VariantInfo, HugoSymbol)\n\nDid you notice that I used dplyr::select() rather than select()? That’s to avoid namespace conflict, especially when you loaded too many libs in the same code.\nNext, we want to convert it to a mutation matrix:\n\nmutation.matrix &lt;- pivot_wider(depmap_mutation_data %&gt;% filter(LikelyLoF == TRUE) %&gt;% \n                        dplyr::select(HugoSymbol, ModelID) %&gt;% \n                        group_by(ModelID) %&gt;% \n                        count(HugoSymbol), \n                        names_from=\"ModelID\", values_from=\"n\") %&gt;%\n                        mutate(across(-HugoSymbol, ~replace_na(., 0))) %&gt;%\n                        mutate(across(where(is.numeric), ~ifelse(. &gt; 1, 1, .))) %&gt;%\n                        mutate(HugoSymbol = paste(\"mut\", HugoSymbol, sep=\".\")) \n\nLet’s break down the code step by step:\n\nFilters rows where LikelyLoF == TRUE (likely loss-of-function mutations). You can also use other filteres, depending on the data\nSelects only HugoSymbol and ModelID.\nGroups by ModelID (cell line) and counts the number of mutations per gene (HugoSymbol). The resulting data frame has one row per gene per cell line, with a count of mutations (n).\nUses pivot_wider() to reshape the data so each ModelID becomes a column, and each row is a gene, making the table wider\nReplaces NA values with 0 (no mutation).\nConverts counts greater than 1 to 1 (binary matrix: mutated or not). Usually we only care if a gene is mutated or not, but not how many mutation it has\nPrefixes gene names with “mut.” and replaces hyphens with underscores.\nRenames the HugoSymbol column to feature.\n\nThis process transforms the mutation data into a binary matrix suitable for downstream analyses like clustering or heatmaps.\nHere are some of the key functions used in this post:\n\nfilter(): Selects rows based on specific conditions.\nselect(): Chooses specific columns from a data frame.\ngroup_by(): Groups data by one or more variables for summary operations.\npivot_wider(): Reshapes data from long to wide format.\nmutate(): Adds or modifies columns in a data frame.\nacross(): Applies a function to multiple columns.\n\nThese functions are part of the Tidyverse and are essential for efficient data manipulation in R. We will continue to use them in future posts to tackle more complex data transformation tasks.\nlet’s save this matrix for later use:\n\nsaveRDS(mutation.matrix, file = here(\"_data/mutation_matrix.rds\"))"
  },
  {
    "objectID": "posts/5_Tidyverse_read_data/index.html",
    "href": "posts/5_Tidyverse_read_data/index.html",
    "title": "Tidyverse: Read Data",
    "section": "",
    "text": "Functions to read different kinds of data in Tidyverse\nBelow is a summary of Tidyverse packages and their functions for importing data (by ChatGPT). Use this as a quick reference, and consult the official documentation or search online for detailed usage and options. You don’t need to memorize everything—just know where to look when needed.\n\n\n\n\n\n\n\n\n\nPackage\nFunction\nPurpose\nFile Type / Input\n\n\n\n\nreadr\nread_csv()\nRead comma-separated values\n.csv\n\n\n\nread_tsv()\nRead tab-separated values\n.tsv\n\n\n\nread_delim()\nRead delimited text files\nCustom delimiter\n\n\n\nread_fwf()\nRead fixed-width text files\n.txt, structured text\n\n\n\nread_table()\nRead whitespace-separated files\n.txt, space-separated\n\n\n\nread_lines()\nRead lines as character vector\nRaw text\n\n\n\nread_file()\nRead entire file as one string\nRaw text\n\n\n\nread_rds() / write_rds()\nRead/write R serialized objects\n.rds\n\n\n\ntype_convert()\nGuess and convert column types\nTibble/data frame\n\n\nreadxl\nread_excel()\nRead Excel files\n.xls, .xlsx\n\n\nhaven\nread_spss()\nImport SPSS data\n.sav, .zsav\n\n\n\nread_stata()\nImport Stata data\n.dta\n\n\n\nread_sas()\nImport SAS data\n.sas7bdat\n\n\nxml2\nread_xml()\nParse XML\n.xml, XML string/URL\n\n\n\nread_html()\nParse HTML\n.html, HTML string/URL\n\n\n\nxml_find_all()\nFind all nodes via XPath\nXPath expression\n\n\n\nxml_find_first()\nFind first matching node\nXPath expression\n\n\n\nxml_text()\nExtract text content\nXML/HTML node\n\n\n\nxml_attr() / xml_attrs()\nExtract attribute(s)\nXML/HTML node\n\n\n\nxml_children()\nGet child nodes\nXML/HTML node\n\n\n\nxml_structure()\nDisplay tree structure\nXML/HTML document\n\n\nhttr\nGET() / POST()\nMake HTTP requests\nAPI endpoints, web URLs\n\n\n\ncontent()\nExtract content from response\nParsed text, JSON, XML, raw\n\n\n\nstatus_code()\nCheck HTTP response code\nHTTP response object\n\n\n\nadd_headers()\nAdd custom headers to request\nAuthorization, content-type, etc.\n\n\n\nauthenticate()\nAdd basic authentication credentials\nUsername/password\n\n\nrvest\nread_html()\n(Wraps xml2::read_html())\nWeb page scraping\n\n\n\nhtml_nodes()\nSelect multiple HTML elements (CSS/XPath)\nCSS or XPath selector\n\n\n\nhtml_node()\nSelect a single HTML element\nCSS or XPath selector\n\n\n\nhtml_text()\nExtract visible text\nHTML node\n\n\n\nhtml_attr()\nExtract attribute value\nHTML tag attribute (e.g., href, src)\n\n\n\nhtml_table()\nExtract HTML tables into tibbles\n&lt;table&gt; elements\n\n\n\n\n\nRead DepMap Mutation Table\nBefore proceeding, ensure you have the tidyverse package installed by running install.packages(\"tidyverse\").\nWe will work with the OmicsSomaticMutations.csv file from the 24Q4 DepMap release. The file can be downloaded from the following link: https://plus.figshare.com/ndownloader/files/51065732. While readr functions can read files directly from a URL, we will download the file locally since it will be used multiple times.\nFor the first attempt, we will use read_csv() with its default parameters.\n\n# Load all packages\nrequire(readr)\nrequire(dplyr)\nrequire(here)\n\nurl &lt;- \"https://plus.figshare.com/ndownloader/files/51065732\"\nfile_path &lt;- here(\"_data/OmicsSomaticMutations.csv\")\ndownload.file(url, file_path )\n\ndepmap_mutation_data &lt;- read_csv(file_path)\n\nOf course, the code runs and loads all rows and columns, but did you notice those warning messages? Don’t ignore them—they often provide valuable insights into potential issues with your data!\n\nLet’s run the suggested problems() command as suggested!\n\nproblems(depmap_mutation_data)\n\n# A tibble: 584 × 5\n     row   col expected           actual                                   file \n   &lt;int&gt; &lt;int&gt; &lt;chr&gt;              &lt;chr&gt;                                    &lt;chr&gt;\n 1 12396    60 1/0/T/F/TRUE/FALSE Reduced foot dorsiflexion strength in C… C:/U…\n 2 12396    61 1/0/T/F/TRUE/FALSE 30706531.0                               C:/U…\n 3 12428    60 1/0/T/F/TRUE/FALSE Pulse pressure                           C:/U…\n 4 12428    61 1/0/T/F/TRUE/FALSE 30224653.0                               C:/U…\n 5 16816    58 1/0/T/F/TRUE/FALSE dd227                                    C:/U…\n 6 16816    59 1/0/T/F/TRUE/FALSE CANDLE syndrome                          C:/U…\n 7 18217    60 1/0/T/F/TRUE/FALSE Response to anti-retroviral therapy (dd… C:/U…\n 8 18217    61 1/0/T/F/TRUE/FALSE 24554482.0                               C:/U…\n 9 18985    60 1/0/T/F/TRUE/FALSE Migraine                                 C:/U…\n10 18985    61 1/0/T/F/TRUE/FALSE 27322543.0                               C:/U…\n# ℹ 574 more rows\n\n\nIf you examine the first problem as an example, you’ll notice that the 60th column (GwasDisease) is empty until row 12,396. To investigate further, I ran the following command to extract all values in this column and display the unique values as a quick spot-check:\n\ndepmap_mutation_data %&gt;% pull(GwasDisease) %&gt;% unique()\n\n[1] NA\n\n\nDid you notice? The entire column is filled with NA values, indicating that it was not properly loaded using the default read_csv() function. This highlights the importance of carefully reviewing your data after importing it. Always double-check for issues like this to ensure your analysis starts on the right foot.\nWhile read_csv() is generally a better option than read.table()—offering convenience by automatically handling quotes, separators, and headers—it is not foolproof. Even if your data is truly a CSV file, the importer may still encounter issues and fail to load your data correctly. This is a critical point to remember for any data scientist or bioinformatician: always validate your imported data to ensure accuracy and reliability.\n\ndepmap_mutation_data &lt;- read_csv(file_path, guess_max = Inf)\n\nRows: 718369 Columns: 70\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (44): Chrom, Ref, Alt, GT, VariantType, VariantInfo, DNAChange, ProteinC...\ndbl (20): Pos, AF, DP, RefCount, AltCount, PS, GcContent, LofNumberOfTranscr...\nlgl  (6): OncogeneHighImpact, TumorSuppressorHighImpact, LikelyLoF, HessDriv...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Check for problems again\nproblems(depmap_mutation_data)\n\n# A tibble: 0 × 5\n# ℹ 5 variables: row &lt;int&gt;, col &lt;int&gt;, expected &lt;chr&gt;, actual &lt;chr&gt;, file &lt;chr&gt;\n\n# Verify the column values\ndepmap_mutation_data %&gt;% pull(GwasDisease) %&gt;% unique()\n\n [1] NA                                                                                                                                                                          \n [2] \"Reduced foot dorsiflexion strength in Charcot-Marie-Tooth disease type 1A\"                                                                                                 \n [3] \"Pulse pressure\"                                                                                                                                                            \n [4] \"Response to anti-retroviral therapy (ddI/d4T) in HIV-1 infection (Grade 2 peripheral neuropathy)\"                                                                          \n [5] \"Migraine\"                                                                                                                                                                  \n [6] \"Heel bone mineral density\"                                                                                                                                                 \n [7] \"Type 2 diabetes\"                                                                                                                                                           \n [8] \"Chronic obstructive pulmonary disease\"                                                                                                                                     \n [9] \"Post bronchodilator FEV1\"                                                                                                                                                  \n[10] \"Intracranial aneurysm\"                                                                                                                                                     \n[11] \"Coronary artery disease (myocardial infarction, percutaneous transluminal coronary angioplasty, coronary artery bypass grafting, angina or chromic ischemic heart disease)\"\n[12] \"Highest math class taken (MTAG)\"                                                                                                                                           \n[13] \"Neuroticism\"                                                                                                                                                               \n[14] \"Height\"                                                                                                                                                                    \n[15] \"Red cell distribution width\"                                                                                                                                               \n[16] \"Vitiligo (non-segmental)\"                                                                                                                                                  \n[17] \"Exudative age-related macular degeneration\"                                                                                                                                \n[18] \"Creatinine levels\"                                                                                                                                                         \n[19] \"Mean arterial pressure\"                                                                                                                                                    \n[20] \"Asthma\"                                                                                                                                                                    \n[21] \"Endometriosis or endometrial cancer (pleiotropy)\"                                                                                                                          \n[22] \"Number of sexual partners\"                                                                                                                                                 \n[23] \"Chronic inflammatory diseases (ankylosing spondylitis, Crohn's disease, psoriasis, primary sclerosing cholangitis, ulcerative colitis) (pleiotropy)\"                       \n[24] \"Cholesterol, total\"                                                                                                                                                        \n[25] \"Blood protein levels\"                                                                                                                                                      \n[26] \"Fasting blood glucose adjusted for BMI\"                                                                                                                                    \n[27] \"Educational attainment (years of education)\"                                                                                                                               \n[28] \"Eczema\"                                                                                                                                                                    \n[29] \"Lack of premeditation\"                                                                                                                                                     \n[30] \"Common carotid intima-media thickness in HIV negative individuals\"                                                                                                         \n[31] \"Systemic sclerosis\"                                                                                                                                                        \n[32] \"Smooth-surface caries\"                                                                                                                                                     \n[33] \"Butyrylcholinesterase levels\"                                                                                                                                              \n[34] \"Idiopathic membranous nephropathy\"                                                                                                                                         \n[35] \"Lymphocyte percentage of white cells\"                                                                                                                                      \n[36] \"Gut microbiome composition (summer)\"                                                                                                                                       \n[37] \"Obesity-related traits\"                                                                                                                                                    \n[38] \"Self-reported math ability\"                                                                                                                                                \n[39] \"Proliferative diabetic retinopathy (vs NPDR and no DR)\"                                                                                                                    \n[40] \"Smoking initiation (ever regular vs never regular) (MTAG)\"                                                                                                                 \n[41] \"Body mass index\"                                                                                                                                                           \n[42] \"Chronic periodontitis (mean interproximal clinical attachment level)\"                                                                                                      \n[43] \"White blood cell count\"                                                                                                                                                    \n[44] \"Alanine aminotransferase levels in excessive alcohol consumption\"                                                                                                          \n[45] \"Time-dependent creatinine clearance change response to tenofovir treatment in HIV infection (time and treatment arm interaction)\"                                          \n[46] \"Type 1 diabetes\"                                                                                                                                                           \n[47] \"Response to anti-retroviral therapy (ddI/d4T) in HIV-1 infection (Grade 3 peripheral neuropathy)\"                                                                          \n[48] \"Heart rate\"                                                                                                                                                                \n[49] \"Schizophrenia\"                                                                                                                                                             \n[50] \"Narcolepsy\"                                                                                                                                                                \n[51] \"Educational attainment (MTAG)\"                                                                                                                                             \n[52] \"Body fat distribution (trunk fat ratio)\"                                                                                                                                   \n[53] \"Circulating myeloperoxidase levels (plasma)\"                                                                                                                               \n[54] \"Urinary albumin excretion\"                                                                                                                                                 \n[55] \"LDL cholesterol\"                                                                                                                                                           \n[56] \"Monocyte count\"                                                                                                                                                            \n[57] \"Childhood ear infection\"                                                                                                                                                   \n[58] \"Major depressive disorder\"                                                                                                                                                 \n[59] \"High IL-1beta levels in gingival crevicular fluid\"                                                                                                                         \n[60] \"Waist-to-hip ratio adjusted for BMI (additive genetic model)\"                                                                                                              \n[61] \"Reticulocyte fraction of red cells\"                                                                                                                                        \n[62] \"Circulating myeloperoxidase levels (serum)\"                                                                                                                                \n[63] \"High light scatter reticulocyte count\"                                                                                                                                     \n[64] \"Myopia (pathological)\"                                                                                                                                                     \n[65] \"Pancreatic cancer\"                                                                                                                                                         \n[66] \"Tonsillectomy\"                                                                                                                                                             \n[67] \"Plantar warts\"                                                                                                                                                             \n[68] \"IgG galactosylation phenotypes (multivariate analysis)\"                                                                                                                    \n[69] \"Chronic hepatitis B infection\"                                                                                                                                             \n[70] \"Morning vs. evening chronotype\"                                                                                                                                            \n[71] \"Coronary heart disease\"                                                                                                                                                    \n[72] \"Facial morphology (factor 12, vertical position of sublabial sulcus relative to central midface)\"                                                                          \n[73] \"Lung function (FEV1/FVC)\"                                                                                                                                                  \n[74] \"Glycine levels\"                                                                                                                                                            \n[75] \"Monocyte percentage of white cells\"                                                                                                                                        \n[76] \"Intraocular pressure\"                                                                                                                                                      \n\n\nAs you can see, no problems were found, and the column now contains more values.\nEven if there are no warnings now, it’s always a good practice to perform a few quick checks to inspect your data. You don’t want to encounter issues later due to unnoticed problems in the initial step. Some example commands you can use include dim(), head(), spec() and names()."
  },
  {
    "objectID": "posts/3_Claude_code_first_try/index.html",
    "href": "posts/3_Claude_code_first_try/index.html",
    "title": "Trying Claude Code",
    "section": "",
    "text": "The other day I tried to install Claude Code and made a web app, it was fun. Here are my steps and take-aways:"
  },
  {
    "objectID": "posts/3_Claude_code_first_try/index.html#steps-ive-taken",
    "href": "posts/3_Claude_code_first_try/index.html#steps-ive-taken",
    "title": "Trying Claude Code",
    "section": "Steps I’ve taken",
    "text": "Steps I’ve taken\n\nStarted an EC2 t3.medium instance, all settings are default\nInstalled Claude Code as instructed by its manual\nStarted to prompt within claude code to build the app\nof course, track the folder in github and host the web app on github.io\n\nAll straightforward, just followed their documentations"
  },
  {
    "objectID": "posts/3_Claude_code_first_try/index.html#take-aways",
    "href": "posts/3_Claude_code_first_try/index.html#take-aways",
    "title": "Trying Claude Code",
    "section": "Take-aways",
    "text": "Take-aways\n\nWith Claude Code, from scratch, I was able to build a working app with three functions within a few hours and a few bucks!\nI am new to building web apps with javascript, or using openai api, or using puter.js (never heard of it until today), but it didn’t seem to matter\nI do need to break down the tasks into smaller pieces, sometimes give clear directions, for example:\n\nexplictly asked Claude Code to study the chat function from Puter.js to make sure it understands the function\nwent in the log to figure out the exact error, and then taught Claude Code the structure of the return value of the chat function\n\nThe cost was about 7 bucks, but it will stack up quickly if the code gets fat!"
  },
  {
    "objectID": "posts/1_First_test_post/index.html",
    "href": "posts/1_First_test_post/index.html",
    "title": "Let me try Quarto and the first post",
    "section": "",
    "text": "Today, I was thinking about how to organize my code snippets (in R or shell scripts) so I can quickly reuse them when needed. Of course, we have amazing AI tools like Claude Code, ChatGPT, and others that can generate code for specific tasks in seconds. Still, I often find myself wanting to reuse my own snippets—especially for tasks I repeat frequently. For example, when I want to generate a heatmap in the same style I’ve used before (a common need for bioinformaticians), having a reusable template is much more efficient.\nNaturally, I started thinking about using Markdown, which allows me to display code alongside explanations and outputs. That’s when I came across Quarto —a powerful and flexible tool that seems perfect for this purpose.\nComparison with R Markdown by ChatGPT:\n\n\n\n\n\n\n\n\nFeature\nQuarto\nR Markdown\n\n\n\n\nLanguage support\nMulti-language (R, Python, Julia, Observable)\nPrimarily R (some Python via reticulate)\n\n\nOutput formats\nHTML, PDF, DOCX, slides, websites, books\nSame, but Quarto handles more advanced formats more cleanly\n\n\nProject management\nBuilt-in support (multi-doc workflows, websites, books)\nRequires more manual setup\n\n\nVisual editor\nYes (RStudio)\nYes (RStudio)\n\n\nFuture support\nActively developed to replace R Markdown\nStill supported, but focus is shifting to Quarto\n\n\nCross-language notebooks\nYes\nLimited\n\n\n\nComparison with Jupyter by ChatGPT:\n\n\n\n\n\n\n\n\nFeature\nQuarto\nJupyter\n\n\n\n\nDocument type\nMarkdown-based, reproducible docs\nCode notebooks with rich outputs\n\n\nCode+text workflow\nLiterate programming focus\nMore code-focused\n\n\nVersion control\nMarkdown = Git-friendly\n.ipynb files are harder to diff\n\n\nFormatting and layout\nMore control (with YAML, markdown, custom templates)\nLess control unless using external tools\n\n\nMultiple languages\nSupports R, Python, Julia etc. in one document\nEach notebook is language-specific\n\n\nUI\nUses RStudio, VS Code, or CLI\nBrowser-based or via VS Code\n\n\n\nKey advantages summarized by ChatGPT:\n\n\n\n\n\n\n\n\n\nFeature\nQuarto\nR Markdown\nJupyter Notebook\n\n\n\n\nMulti-language support\n✅\n⚠️ (via reticulate)\n❌ (1 kernel per notebook)\n\n\nWeb/slide outputs\n✅ Reveal.js, Websites\n✅ but clunkier\n❌\n\n\nReproducible reports\n✅\n✅\n⚠️ (can run out of order)\n\n\nVersion control\n✅ Markdown-based\n✅\n⚠️ JSON, hard to diff\n\n\nParameterization\n✅ Built-in\n⚠️\n⚠️\n\n\n\nSo let me give it a try!\n\nInstallation is easy, see details here: https://quarto.org/docs/get-started/\nI took a quick look at the Guide: https://quarto.org/docs/guide/\nThen I jumped in and created a blog: https://quarto.org/docs/websites/website-blog.html\nEdited the template coming with Qoarto and here we go!"
  },
  {
    "objectID": "posts/11_caret_RFE/index.html",
    "href": "posts/11_caret_RFE/index.html",
    "title": "Recursive Feature Elimination with Caret",
    "section": "",
    "text": "In this post, we will do something slightly more complicated with caret. Recursive Feature Elimination (RFE) is a feature selection technique that recursively removes less important features and builds models on the remaining subset of features. The goal is to identify the most relevant features that contribute to the predictive performance of the model.\nThe first section of the code will be the same:\n\n# Load all packages\nrequire(tidyverse)\nrequire(here)\nrequire(caret) \nrequire(randomForest)\n\n# Load the mutation table from the RDS file saved in the last post\ndata &lt;- readRDS(here(\"_data/combined_data.rds\"))\n\nfile_path &lt;- here(\"_data/cancerGeneList.tsv\")\n\nGene_anno &lt;- read_tsv(file_path, guess_max = Inf)\n\n# pull genes in MSK-IMPACT panel \n\nMSK_genes &lt;- Gene_anno %&gt;% filter(`MSK-IMPACT` == \"Yes\") %&gt;%\n            pull(`Hugo Symbol`) %&gt;% unique()\n\ndata_rf &lt;- data %&gt;% \n        dplyr::select(any_of(paste0(\"mut.\", MSK_genes)),\n                                    WGD) %&gt;%\n                filter(! is.na(WGD))\n\n# remove \"-\" from names to avoid errors running RF               \nnames(data_rf) &lt;- gsub(\"-\", \"\", names(data_rf))\n\ndata_rf &lt;- data_rf %&gt;% mutate(WGD = as.factor(WGD))\n\nLet’s now run RFE, still with Ramdom Forests. It will take a while too…\n\nset.seed(23)\ntrain_idx &lt;- createDataPartition(data_rf$WGD, p = 0.8, list = FALSE)\ntrain_data &lt;- data_rf[train_idx, ]\ntest_data &lt;- data_rf[-train_idx, ]\n\n# Set up RFE\nrfe_control &lt;-rfeControl(functions = rfFuncs, \n                   method = \"repeatedcv\", \n                   number = 10,\n                   repeats = 3,\n                   verbose = FALSE)\n\nrfe_result &lt;- rfe(\n  x = train_data %&gt;% dplyr::select(-WGD),\n  y = train_data$WGD,\n  sizes = c(5,10,20,30,40,50,100), \n  rfeControl = rfe_control )\n\nprint(rfe_result)\n\n\nRecursive feature selection\n\nOuter resampling method: Cross-Validated (10 fold, repeated 3 times) \n\nResampling performance over subset size:\n\n Variables Accuracy   Kappa AccuracySD KappaSD Selected\n         5   0.6578 0.09567    0.02716 0.09121         \n        10   0.6620 0.23667    0.03135 0.10668         \n        20   0.6825 0.30673    0.04058 0.09377         \n        30   0.6897 0.32485    0.04305 0.09323         \n        40   0.6931 0.32918    0.04620 0.09903         \n        50   0.6967 0.33438    0.04392 0.09383         \n       100   0.6993 0.33601    0.04499 0.09349         \n       475   0.7089 0.35307    0.04247 0.08988        *\n\nThe top 5 variables (out of 475):\n   mut.TP53, mut.ID3, mut.NF1, mut.CCND3, mut.ASXL1\n\nrfe_final_model &lt;- rfe_result$fit\n\nvarImpPlot(rfe_final_model, n.var=15)\n\n\n\n\n\n\n\n# Predict on test set\nrf_pred &lt;- predict(rfe_final_model, newdata = test_data)\n\nconfusionMatrix(rf_pred, test_data$WGD)\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0  47  39\n         1  62 173\n                                          \n               Accuracy : 0.6854          \n                 95% CI : (0.6315, 0.7358)\n    No Information Rate : 0.6604          \n    P-Value [Acc &gt; NIR] : 0.18874         \n                                          \n                  Kappa : 0.2606          \n                                          \n Mcnemar's Test P-Value : 0.02859         \n                                          \n            Sensitivity : 0.4312          \n            Specificity : 0.8160          \n         Pos Pred Value : 0.5465          \n         Neg Pred Value : 0.7362          \n             Prevalence : 0.3396          \n         Detection Rate : 0.1464          \n   Detection Prevalence : 0.2679          \n      Balanced Accuracy : 0.6236          \n                                          \n       'Positive' Class : 0               \n                                          \n\n\nApparently, using all features to build a model is not ideal and likely to be overfitting. But as a toy example, we can see the top feature is mut.TP53, which has been reported to be associated with WGD status."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DNA-Geek’s Playground",
    "section": "",
    "text": "DepMap 25Q2 Update\n\n\n\nData Science\n\nR Programming\n\n\n\n\n\n\n\n\n\nAug 3, 2025\n\n\nJie Wu\n\n\n\n\n\n\n\n\n\n\n\n\nRecursive Feature Elimination with Caret\n\n\n\nMachine Learning\n\nData Science\n\nR Programming\n\n\n\n\n\n\n\n\n\nJun 21, 2025\n\n\nJie Wu\n\n\n\n\n\n\n\n\n\n\n\n\nRandom Forest with Caret\n\n\n\nMachine Learning\n\nData Science\n\nR Programming\n\n\n\n\n\n\n\n\n\nJun 20, 2025\n\n\nJie Wu\n\n\n\n\n\n\n\n\n\n\n\n\nBasic Random Forest\n\n\n\nMachine Learning\n\nData Science\n\nR Programming\n\n\n\n\n\n\n\n\n\nJun 19, 2025\n\n\nJie Wu\n\n\n\n\n\n\n\n\n\n\n\n\nTidyverse and ggpubr: Violin plots and more\n\n\n\nTidyverse\n\nData Science\n\nR Programming\n\n\n\n\n\n\n\n\n\nJun 18, 2025\n\n\nJie Wu\n\n\n\n\n\n\n\n\n\n\n\n\nTidyverse: Transform data, mutation table to matrix\n\n\n\nTidyverse\n\nData Science\n\nR Programming\n\n\n\n\n\n\n\n\n\nMay 21, 2025\n\n\nJie Wu\n\n\n\n\n\n\n\n\n\n\n\n\nTidyverse: Read Data\n\n\n\nTidyverse\n\nData Science\n\nR Programming\n\n\n\n\n\n\n\n\n\nMay 9, 2025\n\n\nJie Wu\n\n\n\n\n\n\n\n\n\n\n\n\nTidyverse Introduction\n\n\n\nData Science\n\nR Programming\n\nTidyverse\n\n\n\n\n\n\n\n\n\nMay 4, 2025\n\n\nJie Wu\n\n\n\n\n\n\n\n\n\n\n\n\nTrying Claude Code\n\n\n\nClaude Code\n\n\n\n\n\n\n\n\n\nMay 4, 2025\n\n\nJie Wu\n\n\n\n\n\n\n\n\n\n\n\n\nA few tips for Quarto\n\n\n\nrmarkdown\n\nQuarto\n\n\n\n\n\n\n\n\n\nMay 4, 2025\n\n\nJie Wu\n\n\n\n\n\n\n\n\n\n\n\n\nLet me try Quarto and the first post\n\n\n\nQuarto\n\n\n\n\n\n\n\n\n\nMay 3, 2025\n\n\nJie Wu\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Nice to meet you! I am Jie Wu, a computational biologist. While most of my time I am analyzing data as a bioinformatcian, I also play with other stuff, for example: using AI to build some useful tools. I enjoyed learning new things and this blog is also my playground. I’d be delighted if anything I share here turns out to be helpful to you."
  },
  {
    "objectID": "posts/10_caret_RF/index.html",
    "href": "posts/10_caret_RF/index.html",
    "title": "Random Forest with Caret",
    "section": "",
    "text": "In this post, we will use the caret package to implement a more standardized machine learning workflow.\nThe caret (Classification And REgression Training) package in R is a comprehensive toolkit for building, evaluating, and tuning machine learning models. It provides a unified interface to hundreds of algorithms, streamlines data preprocessing, supports resampling methods, and simplifies model comparison. By standardizing workflows, caret makes it easier to develop robust and reproducible predictive models in R.\nLet’s load the prepare the data table again:\n\n# Load all packages\nrequire(tidyverse)\nrequire(here)\nrequire(caret) \n\n# Load the mutation table from the RDS file saved in the last post\ndata &lt;- readRDS(here(\"_data/combined_data.rds\"))\n\nfile_path &lt;- here(\"_data/cancerGeneList.tsv\")\n\nGene_anno &lt;- read_tsv(file_path, guess_max = Inf)\n\n# pull genes in MSK-IMPACT panel \n\nMSK_genes &lt;- Gene_anno %&gt;% filter(`MSK-IMPACT` == \"Yes\") %&gt;%\n            pull(`Hugo Symbol`) %&gt;% unique()\n\ndata_rf &lt;- data %&gt;% \n        dplyr::select(any_of(paste0(\"mut.\", MSK_genes)),\n                                    WGD) %&gt;%\n                filter(! is.na(WGD))\n\n# remove \"-\" from names to avoid errors running RF               \nnames(data_rf) &lt;- gsub(\"-\", \"\", names(data_rf))\n\ndata_rf &lt;- data_rf %&gt;% mutate(WGD = as.factor(WGD))\n\ncaret has handy functions to create training and test sets easily. We can use the createDataPartition() function to split our data into training and testing sets while preserving the class distribution of the target variable. We can then use trainControl() to set up cross-validation parameteres.\nHere’s how we can do it: (The training will take a while)\n\nset.seed(23)\ntrain_idx &lt;- createDataPartition(data_rf$WGD, p = 0.8, list = FALSE)\ntrain_data &lt;- data_rf[train_idx, ]\ntest_data &lt;- data_rf[-train_idx, ]\n\n# Set up cross-validation\nctrl &lt;- trainControl(method = \"cv\", number = 10)\n\nrf_model &lt;- train(\n    WGD ~ .,\n    data = train_data,\n    method = \"rf\",\n    trControl = ctrl,\n    importance = TRUE\n)\n\n\nprint(rf_model)\n\nRandom Forest \n\n1286 samples\n 475 predictor\n   2 classes: '0', '1' \n\nNo pre-processing\nResampling: Cross-Validated (10 fold) \nSummary of sample sizes: 1158, 1157, 1157, 1158, 1157, 1157, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa    \n    2   0.6609738  0.0000000\n  238   0.6570494  0.2494827\n  475   0.6500484  0.2411229\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 2.\n\nrandomForest::varImpPlot(rf_model$finalModel, n.var=10)\n\n\n\n\n\n\n\n# Predict on test set\nrf_pred &lt;- predict(rf_model, newdata = test_data)\n\nconfusionMatrix(rf_pred, test_data$WGD)\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction   0   1\n         0   0   0\n         1 109 212\n                                          \n               Accuracy : 0.6604          \n                 95% CI : (0.6058, 0.7121)\n    No Information Rate : 0.6604          \n    P-Value [Acc &gt; NIR] : 0.526           \n                                          \n                  Kappa : 0               \n                                          \n Mcnemar's Test P-Value : &lt;2e-16          \n                                          \n            Sensitivity : 0.0000          \n            Specificity : 1.0000          \n         Pos Pred Value :    NaN          \n         Neg Pred Value : 0.6604          \n             Prevalence : 0.3396          \n         Detection Rate : 0.0000          \n   Detection Prevalence : 0.0000          \n      Balanced Accuracy : 0.5000          \n                                          \n       'Positive' Class : 0               \n                                          \n\n\nLet’s take a look at top features, we use ComplexHeatmap, which is my favorite heatmap package. We only use a subset of the cell lines for better visualiztion.\n\ntopfeatures &lt;- \n    randomForest::importance(rf_model$finalModel)  %&gt;% \n    as.data.frame() %&gt;% \n    arrange(-`0`) %&gt;% \n    head(10)  %&gt;% \n    row.names()\n\nrequire(ComplexHeatmap)\n\n\nHeatmap(\n    data_rf %&gt;% arrange(WGD) %&gt;% dplyr::select(topfeatures),\n    left_annotation = HeatmapAnnotation(\n        df = (data_rf %&gt;% arrange(WGD) %&gt;% dplyr::select(WGD)),\n        which = \"row\"\n    ),\n    cluster_rows = FALSE,\n    border = FALSE,\n    col = c(\"0\" = \"white\", \"1\" = \"red\")\n)"
  },
  {
    "objectID": "posts/12_depmap_25Q2/index.html",
    "href": "posts/12_depmap_25Q2/index.html",
    "title": "DepMap 25Q2 Update",
    "section": "",
    "text": "DepMap just released a new version. See the 25Q2 release announcement for details. This release includes several updates relevant to oncology biomarkers.\nMutations:\n\nThe minimum depth threshold for mutation calling has increased from 2 to 5 (the older threshold suprised me a little)\nSome mutations have been rescued:\n\nPrevious versions had incorrect gene symbols assigned.\nQuality control (QC) procedures have been updated.\n\nOncogene and tumor suppressor gene lists have been updated based on OncoKB. The pipeline now uses a newer version of VEP with updated gnomAD data too.\n\nCNVs:\n\nMore WGS data: it seems that Broad is updating WGS workflows which should be better at CNV calling. Looking forward to new update in 25Q4 regarding this\nTransition period means analysis on CNVs may need to stick to older release or some careful adjustments may be needed\n\nGene Expression:\n\nSwitched to Salmon from RSEM for TPMs\nCounts are now from STAR\nDefault entry flag has been added for models with multiple datasets\n\nOther updates:\nThe release note also mentioned that there is a new column of PediatricModelType.\nFirst let’s compare to older release to see what new cell lines were added.\n\n\nCode\n# Load all packages\nrequire(readr)\nrequire(dplyr)\nrequire(here)\n\nmodel_25Q2_file  &lt;- here(\"_data/25Q2/Model.csv\")\nmodel_24Q4_file  &lt;- here(\"_data/24Q4/Model.csv\")\n\nmodel_25Q2 &lt;- read_csv(model_25Q2_file)\nmodel_24Q4 &lt;- read_csv(model_24Q4_file)\n\n\nlibrary(ggplot2)\n\n# Visualize AgeCategory vs Sex as a pie chart\n# Find overlapping model_ids\noverlap_ids &lt;- intersect(model_25Q2$ModelID, model_24Q4$ModelID)\n\n# Compare counts\ncat(\"Number of overlapping Models between 25Q2 and 24Q4\", length(overlap_ids), \"\\n\")\n\n\nNumber of overlapping Models between 25Q2 and 24Q4 2105 \n\n\nCode\ncat (\"And these are the unique cell lines in 25Q2:\")\n\n\nAnd these are the unique cell lines in 25Q2:\n\n\nCode\nmodel_25Q2 %&gt;% filter(! ModelID %in% overlap_ids) %&gt;% pull(StrippedCellLineName)\n\n\n [1] \"HEK293\"     \"HDMB03\"     \"SUDHL2\"     \"DL221\"      \"OSUDES23\"  \n [6] \"CHLA02ATRT\" \"CHLA01RMED\" \"NRHGCT1\"    \"HBEC3KT\"    \"Het1A\"     \n[11] \"HuLaPC\"    \n\n\nCode\ncat (\"check distribution of the Pediatric models\")\n\n\ncheck distribution of the Pediatric models\n\n\nCode\n# Distribution of OncotreePrimaryDisease for PediatricModelType == \"F\"\npediatric_dist &lt;- model_25Q2 %&gt;%\n  filter(PediatricModelType == TRUE) %&gt;%\n  count(OncotreePrimaryDisease, sort = TRUE)\n\nprint(pediatric_dist)\n\n\n# A tibble: 30 × 2\n   OncotreePrimaryDisease                  n\n   &lt;chr&gt;                               &lt;int&gt;\n 1 Acute Myeloid Leukemia                 62\n 2 Ewing Sarcoma                          51\n 3 Neuroblastoma                          51\n 4 B-Cell Acute Lymphoblastic Leukemia    32\n 5 Osteosarcoma                           29\n 6 Mature B-Cell Neoplasms                26\n 7 T-Lymphoblastic Leukemia/Lymphoma      22\n 8 Embryonal Tumor                        21\n 9 Rhabdomyosarcoma                       20\n10 Myeloproliferative Neoplasms           18\n# ℹ 20 more rows\n\n\nCode\n# visualize as bar plot\nggplot(pediatric_dist, aes(x = reorder(OncotreePrimaryDisease, n), y = n)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(title = \"Distribution of OncotreePrimaryDisease (PediatricModelType == F)\",\n       x = \"OncotreePrimaryDisease\", y = \"Count\")\n\n\n\n\n\n\n\n\n\nAs always, it is great to have improved DepMap database every quarter, especially this time there are more efforts on WGS and pediatric models. Time to update your local database to reflect the changes!"
  },
  {
    "objectID": "posts/2_Use_visual_edit_quarto/index.html",
    "href": "posts/2_Use_visual_edit_quarto/index.html",
    "title": "A few tips for Quarto",
    "section": "",
    "text": "Use visual editor mode\nI know you like writing Markdowns in terminals, but sometimes a visual editor is helpful, for example:\n\nyou can add an image very easily, simply like using word, you can screenshot and paste, the editor will generate a folder, place the picture in and write the link in your document in a second:\n\nYou can edit table easily, do you sometimes find yourself counting the “|”s?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCol1\nCol2\nCol3\nCol4\nCol5\nCol6\nCol7\nCol8\nCol9\nCol10\n\n\n\n\n\n\nmany\n\n\n\n\n\n\n\n\n\n\n\n\nempty\n\ncells\n\nyou\nknow\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwhat\n\n\nI\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmean\n\n\n\n\nCitations can be added too(De Carvalho and Vartanian 2024), a references.bib will be added and managed by the editor\n\nActually very cool, and you can switch between text editor and visual editor very easily (Ctrl + Shift + F4), see more details on Quarto’s documentation\n\n\nPublish to GitHub Pages\nThere is a good guidance at [Quarto]{https://quarto.org/docs/publishing/github-pages.html} on how to publish automatically to GitHub Pages. One error I ran into was: my Git functions worked well but “quarto publish gh-pages” didn’t work. In that case, check if you have passphrase associated with your ssh key. This can be fixed following this post\n\n\n\n\n\nReferences\n\nDe Carvalho, Aline Martins, and Daniel Vartanian. 2024. “Quarto Website.” https://doi.org/10.17605/OSF.IO/XY4N7."
  },
  {
    "objectID": "posts/4_Tidyverse_intro/index.html",
    "href": "posts/4_Tidyverse_intro/index.html",
    "title": "Tidyverse Introduction",
    "section": "",
    "text": "Introduction\nThere are many blogs or articles describing why using Tidyverse rather than the traditional R coding, for example\n\nIntro from Rstudio\nRbloggers\nhttps://tidyverse.tidyverse.org/\n\nI am not going into details, but my main takeaways as a bioinformatician\n\nPiping (%&gt;% ) is more natural if you come from bash scripting\nTidyverse is a universe with multiple packages, many of which are super useful, especially in data science.\n\nThe packages share common design, function arguments, data structures and so on\nMany other packages are developed in this universe, making it a critical mass\n\n\n\nLogic of my blogs\nI won’t cover topics that are easily searchable on Google or ChatGPT, such as how to install a package or run a function. Instead, I’ll focus on practical things you might encounter as a bioinformatician, with tips that I hope will help make your analyses more efficient."
  },
  {
    "objectID": "posts/8_Tidyverse_violin_plots/index.html",
    "href": "posts/8_Tidyverse_violin_plots/index.html",
    "title": "Tidyverse and ggpubr: Violin plots and more",
    "section": "",
    "text": "In this post, we’ll enrich the mutation table from the previous blog by integrating additional sample annotations and omics signatures. Using tidyverse tools, we’ll join these datasets and explore the results with violin and box plots to uncover meaningful biological insights.\n\n# Load all packages\nrequire(tidyverse)\nrequire(here)\n\n# Load the mutation table from the RDS file saved in the last post\nmutation_table &lt;- readRDS(here(\"_data/mutation_matrix.rds\"))\n\nNow download more tables from DepMap 24Q4:\n\nurl &lt;- \"https://plus.figshare.com/ndownloader/files/51065297\"\nfile_path &lt;- here(\"_data/Model.csv\")\n\nif (!file.exists(file_path)) {\n    download.file(url, file_path)\n}\n\nModel_anno &lt;- read_csv(file_path, guess_max = Inf)\n\nurl &lt;- \"https://plus.figshare.com/ndownloader/files/51065726\"\nfile_path &lt;- here(\"_data/OmicsSignatures.csv\")\n\nif (!file.exists(file_path)) {\n    download.file(url, file_path)\n}\n\nModel_sigs &lt;- read_csv(file_path, guess_max = Inf)\nnames(Model_sigs)[1] &lt;- \"ModelID\"\n\nLet’s now bring all these tables together for a comprehensive dataset. We’ll reshape the mutation table using pivot_longer() and pivot_wider() (instead of t()), then use full_join() from dplyr (instead of merge()) to combine everything into a single tidy data frame. This tidyverse-based workflow keeps things organized and makes downstream analysis and visualization much easier.\n\nmutation_table &lt;- mutation_table %&gt;%\n    pivot_longer(\n        cols = -HugoSymbol,\n        names_to = \"Sample\",\n        values_to = \"Mutation\"\n    ) %&gt;% \n    pivot_wider(names_from = \"HugoSymbol\",\n                values_from = \"Mutation\"\n                )\n\ndata &lt;- Model_anno %&gt;%\n    full_join(Model_sigs,by=c(\"ModelID\")) %&gt;%\n    full_join(mutation_table, by = c(\"ModelID\"=\"Sample\"))\n\nNow that we have a combined table, let’s visualize the relationship between KMT2D mutation status and MSI score using violin and boxplots. This can help us see if MSI tumors have more mutations in genes like KMT2D. Here we use ggpubr, which is built on ggplot2 and makes publication-ready figures easier to create.\n\nrequire(ggpubr)\n\nggviolin(data %&gt;% filter(!is.na(mut.KMT2D)),\n        x=\"mut.KMT2D\", y=\"MSIScore\", \n        add=c(\"boxplot\"), fill=\"mut.KMT2D\", \n        add.params = list(fill = \"white\", alpha=0.5), trim=T) +\n        stat_compare_means(comparisons = list(c(\"0\",\"1\")), \n        label = \"p.signif\", show.legend=F )  +\n        geom_jitter( width=0.2, height=0)\n\n\n\n\n\n\n\n\nOne quick note: While ggpubr offers an add = \"jitter\" option for adding jittered points to your plots, in this example I used geom_jitter() from ggplot2 directly. Both approaches work, but geom_jitter() provides a bit more flexibility if you want to customize the appearance of the points, especially in this case I do not want to jitter on y-axis.\nAgain, we save this data frame in a RDS file for later use\n\nsaveRDS(data, here(\"_data/combined_data.rds\"))"
  }
]